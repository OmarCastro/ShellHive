// Generated by LiveScript 1.2.0
(function(){
  var express, jade, fs, util, stylus, nib, Datastore, spawn, commandRunner, parser, app, db, io;
  express = require('express');
  jade = require('jade');
  fs = require('fs');
  util = require('util');
  stylus = require('stylus');
  nib = require('nib');
  Datastore = require('nedb');
  spawn = require('child_process').spawn;
  commandRunner = require('./server/commandRunner');
  parser = require('./target/parser/parser');
  app = express();
  db = new Datastore({
    filename: 'db/basic.db',
    autoload: true
  });
  db.ensureIndex({
    fieldName: 'name',
    unique: true
  });
  db.persistence.setAutocompactionInterval(5000);
  io = require('socket.io').listen(
  app.listen(8000));
  app.set('views', __dirname + '/views');
  app.set('view engine', 'jade');
  app.set('view options', {
    layout: false
  });
  app.configure(function(){
    app.use(stylus.middleware({
      src: __dirname + '/views',
      dest: __dirname + '/public',
      compile: function(str, path, fn){
        return stylus(str).set('filename', path).set('compress', true).use(nib());
      }
    }));
    app.use(express['static'](__dirname + '/public'));
    app.use('/js', express['static'](__dirname + '/bower_components'));
  });
  app.get('/', function(req, res){
    res.render('home.jade');
  });
  app.get('/helper', function(req, res){
    res.render('helper.jade');
  });
  io.sockets.on('connection', function(socket){
    socket.on('runCommand', function(socketData){
      var command, x$, e;
      try {
        command = parser.parseVisualData(socketData.visualData);
        socket.emit("commandCall", command);
        x$ = commandRunner.run(command);
        x$.onStdOut = function(data){
          socket.emit("stdout", data.toString('utf8'));
        };
        x$.onStdErr = function(data){
          socket.emit("stderr", data.toString('utf8'));
        };
        x$.onExit = function(code){
          socket.emit("commExit", code);
        };
      } catch (e$) {
        e = e$;
        socket.emit("stderr", "error parsing the graph " + e);
      }
    });
    /*
    	new user entry event
    */
    socket.on('graph-user', function(data){
      console.log("new user!!");
      socket.join('graph-users');
      db.find({
        name: 'testWorkflow'
      }, function(err, docs){
        console.log(util.inspect(docs));
        if (docs.length > 0) {
          socket.emit('flowData', docs[0]);
          console.log("sent ${docs[0]}");
        }
      });
    });
    socket.on('helper', function(data){
      socket.join('helpers');
    });
    socket.on('run-app', function(data){
      /*
      line = new CommandLine(\cat,["nodes.txt"]).pipe("grep",["cat"])
      	..captureProcess 0
      	..run!
      */
    });
    socket.on('nodePosChanged', function(data){
      var ref$;
      db.update({
        name: 'testWorkflow'
      }, {
        $set: (ref$ = {}, ref$["nodes." + data.id + ".x"] = data.x, ref$["nodes." + data.id + ".y"] = data.y, ref$)
      }, {});
      socket.broadcast.to('graph-users').emit('nodePosChanged', data);
    });
  });
}).call(this);
